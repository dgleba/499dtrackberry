from django.shortcuts import render
from django.shortcuts import render_to_response
from django.http import HttpResponseRedirect
from views_db import db_open, db_set
from forms import toggletest_Form, views_scheduler_selectionForm
from trakberry.forms import emp_training_form, emp_info_form, job_info_form
import MySQLdb
import time
import datetime
from django.core.context_processors import csrf
from trakberry.views_vacation import vacation_temp, vacation_set_current, vacation_set_current2


	
def current_schedule(request):
	db, cur = db_set(request) 
	sql = "SELECT * FROM tkb_jobs ORDER BY %s %s, %s %s" %('Description', 'ASC', 'Job_Name','ASC')
	cur.execute(sql)
	tmp = cur.fetchall()
	tmp2 = tmp[0]
	return render(request,"test3.html",{'total':tmp})

def set_rotation(request):
	db, cur =db_open()
	x = 0			
	mql = ('update tkb_employee_matrix SET Rotation="%s"' % (x))
	cur.execute(mql)
	db.commit()
	
	db.close()
	
	return render(request, "done_test.html")

# Display the Job Rotation for the shift 
def rotation_info_display(request):
	db, cur = db_set(request)
	curr_shift = request.session["matrix_shift"]
	sql = "SELECT * FROM tkb_employee_matrix WHERE Shift = '%s' ORDER BY %s %s , %s %s" %(curr_shift,'Employee', 'ASC','Job','ASC')
	cur.execute(sql)
	tmp = cur.fetchall()

	cql = "SELECT COUNT(*) from tkb_jobs"
	cur.execute(cql)
	tmp2 = cur.fetchall()
	tmp3 = tmp2[0]
	job_ctr = tmp3[0]
		
	jql = "SELECT * FROM tkb_jobs ORDER BY  %s %s, %s %s" %('Description','ASC','Job_Name','ASC')
	cur.execute(jql)
	jmp = cur.fetchall()


	ct = 1
	jct = 0

	j = []
	jc = []
	pj = ""
	for i in jmp:

		if ct == 1:
			pj = i[1]
		if i[1] != pj:
			j.append(str(pj))
			jc.append(jct)
			pj = i[1]
			jct = 0

		ct = ct + 1
		jct = jct + 1

	# *************  ??  **************
	j.append(str(pj))
	jc.append(jct)
	# *********************************

	db.close()
	a = 1
	c =int(job_ctr + 1)
	
	tjobs = zip(j,jc)
	
	ctr1 = 0
	k = []
	sw = -1
	c1 = '#DCDDDE'
	c2 = '#ffffff'
	jb = ""
	for i in tmp:
		if i[2] != jb:
			sw = sw * -1
			if sw == 1:
				ccc = c1
			else:
				ccc = c2
			jb = i[2]
		ctr1 = ctr1 + 1	
		if ctr1 == (job_ctr+1):
			sw = 1
			ctr1 = 1
		if ctr1 == 1:
			ccc = c1
			
				
		k.append(str(ccc))	
				
	#return render(request, "test67.html", {'tjobs':tjobs})
	col_jobs = float(94 / job_ctr)
	
	# Form for shift selection
	if request.POST:
		shift = request.POST.get("shift")
		request.session["matrix_shift"] = shift
		return rotation_info_reload(request)
	else:
		form = toggletest_Form
	args ={}
	args.update(csrf(request))
	args['form'] = form
	
	tmp4 = map(None,tmp,k)
	#tmp4 = zip(tmp,jc)	
	#return render(request, "test67.html", {'List':tmp,'List2':tmp4,'List3':jc})	
	return render(request, "rotation_info_display.html", {'List':tmp4,'B':job_ctr,'A':a,'C':c,'Jobs':jmp,'tjobs':tjobs,'D':col_jobs,'args':args})

def rotation_update(request, index):
	db, cur =db_open()
	sql = "SELECT Rotation FROM tkb_employee_matrix where Id='%s'" %(index)
	cur.execute(sql)
	tmp = cur.fetchall()
	tmp2 = tmp[0]
	level = int(tmp2[0])

	new_level = 0
	
	if level == 0:
		new_level = 1
	if level == 1:
		new_level = 0

	level = new_level				
	mql = ('update tkb_employee_matrix SET Rotation="%s" WHERE Id="%s"' % (level,index))
	cur.execute(mql)
	db.commit()
	
	db.close()
	
	return render(request, "done_rotation.html")	
	
def rotation_info_reload(request):
	return render(request, "done_rotation.html")		

def schedule_set(request):
	current_first = vacation_set_current2()
	request.session["current_first"] = current_first
	db, cur = db_set(request)
	sql = "SELECT * FROM tkb_jobs ORDER BY  %s %s, %s %s" %('Description','ASC','Job_Name','ASC')
	cur.execute(sql)
	tmp = cur.fetchall()
	return render(request, "schedule_info_display.html", {'List':tmp})


# ****************************************************
# *     Scheduling Section                           *
# ****************************************************

#	+++++ Module for ensuring priority is numbered sequentially again after changes  +++++++++++++++++++++++
def schedule_init(request):
	r = 1
	try:
		shift = request.session["matrix_shift"]
	except:
		shift = request.session["shift_priority"]
		
	db, cur = db_set(request)
	
	aql = "SELECT COUNT(*) from tkb_employee_matrix WHERE Shift = '%s' and Rotation = '%s'" %(shift,r)
	cur.execute(aql)
	tmp2 = cur.fetchall()
	tmp3 = tmp2[0]
	job_count = tmp3[0]
	
	bql = "SELECT * FROM tkb_employee_matrix WHERE Shift = '%s' and Rotation = '%s' ORDER BY %s %s , %s %s" %(shift,r,'Employee', 'ASC','Priority','ASC')	
	cur.execute(bql)
	tmp = cur.fetchall()
	
	ct = 1
	current_employee = ''
	new_employee = 'start'
	for x in tmp:
		i_d = x[0]
		new_employee = x[1]
		if new_employee != current_employee:
			current_employee = new_employee
			ct = 1
		sql = ('update tkb_employee_matrix SET Priority="%s" WHERE Id ="%s"' % (ct, i_d))
		cur.execute(sql)
		db.commit()
		ct = ct + 1
	db.close()	 
			
	return render(request,'test22.html',{'tmp':tmp,'ID':i_d})
	

# Set Schedule in table along with preselected jobs that could run
def schedule_set2(request):
	rotation = 1
	shift = 'Cont A Nights CSD 2'
	db, cur = db_set(request)
	
	employee = '---'
	dql = ('DELETE FROM tkb_schedule WHERE Employee = "%s"' % (employee))
	cur.execute(dql)
	db.commit()

	# Select all the Job_Names and Descriptions linked together that this shift rotation is eligible for
	# tmp(0) = Job_Name  :  tmp[1] = Description  :  tmp[2] = number of this combos in selected list
	sql = "SELECT Job_Name , Description, count(*) as total from tkb_employee_matrix where  Shift='%s' and Rotation='%s' GROUP by Job_Name, Description" % (shift,rotation)
	cur.execute(sql)
	tmp = cur.fetchall()
	
	position = 'CNC'
	Asql = "SELECT * from tkb_jobs WHERE Position = '%s' ORDER BY %s %s , %s %s" % (position, 'Description', 'ASC', 'Job_Name', 'ASC')
	cur.execute(Asql)
	Amp = cur.fetchall()
	
	id_ctr = 0
	for a in Amp:
		id_ctr = id_ctr + 1
		selection = 0
#		for x in tmp:
#			if x[1] == '6L Output' or x[1] == '6L Input':
			#if x[1] == a[1] and x[0] == a[5]:
#				selection = 1
		if a[1] == '6L Output' or a[1] == '6L Input':
			selection = 1
		cur.execute ('''INSERT INTO tkb_schedule(Description,Job_Name,Position,Shift,Selection,Id) VALUES(%s,%s,%s,%s,%s,%s)''',(a[1],a[5],a[6],shift,selection,id_ctr))
		db.commit()
	db.close()	
	return schedule_set3(request)

def schedule_set3(request):	
	shift = 'Cont A Nights CSD 2'	
	db, cur = db_set(request)
	Bsql = "SELECT Description, count(*) as total from tkb_schedule where  Shift='%s' GROUP by Description ORDER BY %s %s" % (shift,'Description','ASC')
	cur.execute(Bsql)
	bmp = cur.fetchall()
	
	Csql = "SELECT Id, Description, Job_Name, Selection from tkb_schedule where  Shift='%s' ORDER BY %s %s , %s %s" % (shift,'Description','ASC','Job_Name','ASC')
	cur.execute(Csql)
	cmp = cur.fetchall()
		
	db.close()
	ctr = 0

	sch = []
	cc = []
	v = []
	for x in cmp:
		if (bmp[ctr][0]) != (x[1]):
			ctr = ctr + 1
		try:	
			sch.append(str(bmp[ctr][0]))
			sch.append(bmp[ctr][1])
		except:
			sch.append('---')
			sch.append('---')
		sch.append(str(x[2]))
		cc.append(str(ctr))  # 

	aa = []
	bb = []
	dd = []
	ff = []
	gg = []
	prev = ''
	cct = 0
	ee = bmp[0][1]
	qq = '---'

	for i in cmp:
		if prev == i[1]:
			bb.append('---')

		if i[1] != prev:
			prev = i[1]
			bb.append(i[1])

			ee = bmp[cct][1]
			cct = cct + 1	
#		bb.append(i[1])
		
#		if i[1] != prev:
#			prev = i[1]
		ff.append(ee)	 # Row Span (Number of Job Names for this Description)
		aa.append(str(i[0]))  # Id 
		dd.append(i[2])  #  Job Name
		gg.append(i[3])  # Selection (1 or 0)
	
	list = zip(aa,bb,dd,cc,ff,gg)		
#	return render(request, "test71.html", {'cmp':cmp,'sch':sch,'cc':cc,'bmp':bmp,'list':list,'prev':prev})	
	return schedule_set4(request,list)
	
def schedule_set4(request,list):
	# Set Form Variables 
	qq = '---'
	choice = []
	y = 1
	n = 0
	if request.POST:
	    for x in list:
			if request.POST.get(str(x[0])):
				choice.append(x[0])
				choice.append(y)
			else:
				choice.append(x[0])
				choice.append(n)

            return schedule_set5(request,choice)
			

        else:
		form = views_scheduler_selectionForm()
	args = {}
	args.update(csrf(request))
	args['form'] = form
	ttt = 1
	ttt = str(ttt)
	return render(request, "display_schedule_form.html", {'list':list,'qq':qq,'ttt':ttt,'args':args})	

def schedule_set5(request,choice):
	db, cur = db_open
	for x in choice:
#		sql = ('update tkb_schedule SET Selection="%s" WHERE Id ="%s"' % (str(x[1]), str(x[0])))
#		cur.execute(sql)
#
		db.commit()
	db.close()	
	return render(request,'display_schedule_formRefresh.html', {'a':choice})
	
	
